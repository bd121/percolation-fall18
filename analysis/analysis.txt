Brian Du	
bd121

Copy/Paste results from PercolationStats using PercolationDFS
simulation data for 20 trials
grid	mean	stddev	time
100		0.593	0.014	2.444
200		0.591	0.010	31.960
400		0.590	0.006	854.888
800		0.594	0.004	14500.939

simulation data for 20 trials
grid	mean	stddev	time
100		0.593	0.014	2.466
200		0.591	0.010	24.452
400		0.590	0.006	320.340
800		0.594	0.004	7788.296
Exception in thread "main" java.lang.StackOverflowError
	at PercolationDFS.dfs(PercolationDFS.java:109)
	at PercolationDFS.dfs(PercolationDFS.java:110)
	at PercolationDFS.dfs(PercolationDFS.java:109)
	at PercolationDFS.dfs(PercolationDFS.java:110)
	
	
Copy/Paste results from PercolationStats using PercolationDFSFast
simulation data for 20 trials
grid	mean	stddev	time
100		0.593	0.014	0.748
200		0.591	0.010	0.271
400		0.590	0.006	2.378
800		0.594	0.004	12.410

simulation data for 20 trials
grid	mean	stddev	time
100		0.593	0.014	0.686
200		0.591	0.010	0.296
400		0.590	0.006	2.246
800		0.594	0.004	12.051
Exception in thread "main" java.lang.StackOverflowError
	at PercolationDFS.dfs(PercolationDFS.java:109)
	at PercolationDFS.dfs(PercolationDFS.java:109)
	at PercolationDFS.dfs(PercolationDFS.java:111)

simulation data for 20 trials
grid	mean	stddev	time
100		0.593	0.014	0.171
200		0.591	0.010	0.228
400		0.590	0.006	1.757
800		0.594	0.004	11.485
Exception in thread "main" java.lang.StackOverflowError
	at PercolationDFS.dfs(PercolationDFS.java:109)
	at PercolationDFS.dfs(PercolationDFS.java:109)
	at PercolationDFS.dfs(PercolationDFS.java:109)
	at PercolationDFS.dfs(PercolationDFS.java:109)
	at PercolationDFS.dfs(PercolationDFS.java:109)
	at PercolationDFS.dfs(PercolationDFS.java:109)


Copy/Paste results from PercolationStats using PercolationBFS
simulation data for 20 trials
grid	mean	stddev	time
100		0.593	0.014	0.297
200		0.591	0.010	0.371
400		0.590	0.006	1.976
800		0.594	0.004	12.023
1600	0.592	0.002	67.692
3200	0.593	0.001	504.575

simulation data for 20 trials
grid	mean	stddev	time
100		0.593	0.014	0.226
200		0.591	0.010	0.499
400		0.590	0.006	3.394
800		0.594	0.004	22.731
1600	0.592	0.002	117.360
3200	0.593	0.001	684.406


Copy/Paste results from PercolationStats using PercolationUF 
with the QuickUWPC UnionFind implementation.
simulation data for 20 trials
grid	mean	stddev	time
100		0.593	0.014	0.123
200		0.591	0.010	0.267
400		0.590	0.006	1.606
800		0.594	0.004	9.327
1600	0.592	0.002	43.362
3200	0.593	0.001	348.857


1. How does doubling the grid size affect running time (keeping # trials fixed)

In general, doubling the grid size increases the runtime (though there is an exception going from grid size 100
to 200 for DFSFast). For both PercolationBFS and PercolationUF, doubling grid size leads runtime to increase about 6x.


2. How does doubling the number of trials affect running time.

Doubling the number of trials about doubles the run time. 


3. Estimate the largest grid size you can run in 24 hours with 20 trials. Explain your reasoning.

PercolationUF is the fastest implementation out of the four choices. Going by its trend in grid vs. runtime, 
max grid size which can be run in a day should be 25600. There are 24*3600, or 86400 seconds to a day. Increasing from
3200 to 6400 should increase runtime from around 350 to around 2100 seconds. Increasing to 12800 increases runtime to 
around 12600 seconds. Increasing to 25600 increases runtime to around 75600, which is still smaller than 86400. Doubling
again however will take more than one day's worth of seconds, so the max grid size should be 25600.